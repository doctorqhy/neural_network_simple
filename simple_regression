import tensorflow as tf
from numpy import *
import matplotlib.pyplot as plt


#使用numpy生成200个随机点,作为样本
x_data = linspace(-0.5,0.5,200)[:,newaxis]
noise = random.normal(0,0.02,x_data.shape)
y_data = square(x_data) + noise


#定义两个占位符
x = tf.placeholder(tf.float32,shape=[None,1])
y = tf.placeholder(tf.float32,shape=[None,1])


#定义神经网络隐藏层
#可同时训练200个数据
Weight_L1 = tf.Variable(tf.random_normal([1,10]))
biases_L1 = tf.Variable(tf.zeros([1,10]))
Wx_plus_b_L1 = tf.matmul(x,Weight_L1) + biases_L1
L1 = tf.nn.tanh(Wx_plus_b_L1)


#定义神经网络输出层
Weight_L2 = tf.Variable(tf.random_normal([10,1]))
biases_L2 = tf.Variable(tf.zeros([1,1]))
Wx_plus_b_L2 = tf.matmul(L1,Weight_L2) + biases_L2
prediction = tf.nn.tanh(Wx_plus_b_L2)


#定义代价函数
loss = tf.reduce_mean(tf.square(y - prediction))
#定义优化器
train_step = tf.train.GradientDescentOptimizer(0.1).minimize(loss)


with tf.Session() as sess:

    sess.run(tf.global_variables_initializer())

    for _ in range(2000):

        sess.run(train_step,feed_dict={x:x_data,y:y_data})

    prediction_value = sess.run(prediction,feed_dict={x:x_data})

    plt.figure()
    plt.scatter(x_data,y_data)
    plt.plot(x_data,prediction_value,'r-',lw=5)
    plt.show()
